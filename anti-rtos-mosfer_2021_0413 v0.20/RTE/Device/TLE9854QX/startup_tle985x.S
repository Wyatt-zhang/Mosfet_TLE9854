;/**************************************************************************//**
; * @file     startup_TLE985x.s
; * @brief    CMSIS Cortex-M0 Core Device Startup File for
; *           the Infineon TLE985x Device Series
; * @version  V0.1
; * @date     7. July 2017
; *
; * @note
; * Copyright (C) 2012 ARM Limited. All rights reserved.
; *
; * @par
; * ARM Limited (ARM) is supplying this software for use with Cortex-M
; * processor based microcontrollers.  This file can be freely distributed
; * within development tools that are supporting such ARM based processors.
; *
; * @par
; * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
; * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; *
; ******************************************************************************/
;/*
;//-------- <<< Use Configuration Wizard in Context Menu >>> ------------------
;*/


; <h> Stack Configuration
;   <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
; </h>

Stack_Size      EQU     0x300

                AREA    STACK, NOINIT, READWRITE, ALIGN=3
Stack_Mem       SPACE   Stack_Size
__initial_sp


; <h> Heap Configuration
;   <o>  Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
; </h>

Heap_Size       EQU     0x00000000

                AREA    HEAP, NOINIT, READWRITE, ALIGN=3
__heap_base
Heap_Mem        SPACE   Heap_Size
__heap_limit

                 THUMB
                 PRESERVE8

                
; Vector Table Mapped to Address 0 at Reset

                AREA    RESET, DATA, READONLY
                EXPORT  __Vectors
                EXPORT  __Vectors_End
                EXPORT  __Vectors_Size
                      
__Vectors       DCD     __initial_sp               ; Top of Stack
                DCD     Reset_Handler              ; Reset Handler
                DCD     NMI_Handler                ; NMI Handler
                DCD     HardFault_Handler          ; Hard Fault Handler
                DCD     MemManage_Handler          ; MPU Fault Handler
                DCD     BusFault_Handler           ; Bus Fault Handler
                DCD     UsageFault_Handler         ; Usage Fault Handler
                DCD     0                          ; Reserved
                DCD     0                          ; Reserved
                DCD     0                          ; Reserved
                DCD     0                          ; Reserved
                DCD     SVC_Handler                ; SVCall Handler
                DCD     DebugMon_Handler           ; Debug Monitor Handler
                DCD     0                          ; Reserved
                DCD     PendSV_Handler             ; PendSV Handler
                DCD     SysTick_Handler            ; SysTick Handler

                     ; External Interrupts

                DCD     GPT1_IRQHandler           ; GPTimer Interrupt 1
                DCD     GPT2_IRQHandler           ; GPTimer Interrupt 2
                DCD     ADC2_IRQHandler           ; MU interrupt / ADC2, VBG interrupt
                DCD     ADC1_IRQHandler           ; ADC10 Bit interrupt
                DCD     CCU6SR0_IRQHandler        ; CCU6 node 0 interrupt
                DCD     CCU6SR1_IRQHandler        ; CCU6 node 1 interrupt
                DCD     CCU6SR2_IRQHandler        ; CCU6 node 2 interrupt
                DCD     CCU6SR3_IRQHandler        ; CCU6 node 3 interrupt
                DCD     SSC1_IRQHandler           ; SSC1 interrupt (receive, transmit, error)
                DCD     SSC2_IRQHandler           ; SSC2 interrupt (receive, transmit, error)
                DCD     UART1_IRQHandler          ; UART1 (ASC-LIN) interrupt (receive, transmit), t2, linsync1, LIN
                DCD     UART2_IRQHandler          ; UART2 interrupt (receive, transmit), t21, External interrupt (EINT2)
                DCD     EXINT0_IRQHandler         ; External interrupt (EINT0), wakeup
                DCD     EXINT1_IRQHandler         ; External interrupt (EINT1)
                DCD     WAKEUP_IRQHandler         ; wakeup interrupt (generated by a wakeup event)
                DCD     DIV_IRQHandler            ; Hardware divider interrupt
                DCD     node16_IRQHandler         ; reserved for future use
                DCD     CP_IRQHandler             ; Charge Pump interrupt
                DCD     BDRV_IRQHandler           ; Bridge Driver interrupt
                DCD     HS_IRQHandler             ; High Side Interrupt
                DCD     CSA_IRQHandler            ; OpAmp Interrupt
                DCD     DU1_IRQHandler            ; Differential Unit - DPP1
                DCD     MONx_IRQHandler           ; MONx Interrupt, wakeup
                DCD     PORT2_IRQHandler          ; Port 2.x - DPP1
__Vectors_End

__Vectors_Size EQU __Vectors_End - __Vectors

                AREA    |.text|, CODE, READONLY

;-------------------------------------------------------------------------------
; Reset Handler

Reset_Handler   PROC
                EXPORT  Reset_Handler             [WEAK]
                IMPORT  SystemInit
                IMPORT  __main
                LDR     R0, =SystemInit
                BLX     R0
                LDR     R0, =__main
                BX      R0
                ENDP

;-------------------------------------------------------------------------------
; Dummy Exception Handlers (infinite loops which can be modified)                

NMI_Handler     PROC
                EXPORT  NMI_Handler                [WEAK]
                B       .
                ENDP
HardFault_Handler\
                PROC
                EXPORT  HardFault_Handler          [WEAK]
                B       .
                ENDP
MemManage_Handler\
                PROC
                EXPORT  MemManage_Handler          [WEAK]
                B       .
                ENDP
BusFault_Handler\
                PROC
                EXPORT  BusFault_Handler           [WEAK]
                B       .
                ENDP
UsageFault_Handler\
                PROC
                EXPORT  UsageFault_Handler         [WEAK]
                B       .
                ENDP
SVC_Handler     PROC
                EXPORT  SVC_Handler                [WEAK]
                B       .
                ENDP
DebugMon_Handler\
                PROC
                EXPORT  DebugMon_Handler           [WEAK]
                B       .
                ENDP
PendSV_Handler\
                PROC
                EXPORT  PendSV_Handler             [WEAK]
                B       .
                ENDP
SysTick_Handler\
                PROC
                EXPORT  SysTick_Handler            [WEAK]
                B       .
                ENDP

Default_Handler PROC
                EXPORT  GPT1_IRQHandler           [WEAK]
                EXPORT  GPT2_IRQHandler           [WEAK]
                EXPORT  ADC2_IRQHandler           [WEAK]
                EXPORT  ADC1_IRQHandler           [WEAK]
                EXPORT  CCU6SR0_IRQHandler        [WEAK]
                EXPORT  CCU6SR1_IRQHandler        [WEAK]
                EXPORT  CCU6SR2_IRQHandler        [WEAK]
                EXPORT  CCU6SR3_IRQHandler        [WEAK]
                EXPORT  SSC1_IRQHandler           [WEAK]
                EXPORT  SSC2_IRQHandler           [WEAK]
                EXPORT  UART1_IRQHandler          [WEAK]
                EXPORT  UART2_IRQHandler          [WEAK]
                EXPORT  EXINT0_IRQHandler         [WEAK]
                EXPORT  EXINT1_IRQHandler         [WEAK]
                EXPORT  WAKEUP_IRQHandler         [WEAK]
                EXPORT  DIV_IRQHandler            [WEAK]
                EXPORT  node16_IRQHandler         [WEAK]
                EXPORT  CP_IRQHandler             [WEAK]
                EXPORT  BDRV_IRQHandler           [WEAK]
                EXPORT  HS_IRQHandler             [WEAK]
                EXPORT  CSA_IRQHandler            [WEAK]
                EXPORT  DU1_IRQHandler            [WEAK]
                EXPORT  MONx_IRQHandler           [WEAK]
                EXPORT  PORT2_IRQHandler          [WEAK]

GPT1_IRQHandler 
GPT2_IRQHandler 
ADC2_IRQHandler 
ADC1_IRQHandler 
CCU6SR0_IRQHandler 
CCU6SR1_IRQHandler 
CCU6SR2_IRQHandler 
CCU6SR3_IRQHandler 
SSC1_IRQHandler 
SSC2_IRQHandler 
UART1_IRQHandler
UART2_IRQHandler
EXINT0_IRQHandler
EXINT1_IRQHandler
WAKEUP_IRQHandler
DIV_IRQHandler
node16_IRQHandler
CP_IRQHandler
BDRV_IRQHandler
HS_IRQHandler
CSA_IRQHandler
DU1_IRQHandler
MONx_IRQHandler
PORT2_IRQHandler

                B       .
                ENDP


                ALIGN

;-------------------------------------------------------------------------------
; User Initial Stack & Heap

                IF      :DEF:__MICROLIB
                
                EXPORT  __initial_sp
                EXPORT  __heap_base
                EXPORT  __heap_limit
                
                ELSE
                
                IMPORT  __use_two_region_memory
                EXPORT  __user_initial_stackheap
                
__user_initial_stackheap
                LDR     R0, =  Heap_Mem
                LDR     R1, =(Stack_Mem + Stack_Size)
                LDR     R2, = (Heap_Mem +  Heap_Size)
                LDR     R3, = Stack_Mem
                BX      LR

                ALIGN

                ENDIF

                END

