<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project_creattest.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project_creattest.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Apr 13 11:13:13 2021
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
thread_motion &rArr; Motion_Control &rArr; AutoUp &rArr; Duty_AutoProcess &rArr; Zone1_Process &rArr; PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC1_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[c]">ADC2_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[1c]">BDRV_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[e]">CCU6SR0_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[f]">CCU6SR1_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[10]">CCU6SR2_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[11]">CCU6SR3_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[1b]">CP_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[1e]">CSA_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[19]">DIV_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[1f]">DU1_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[16]">EXINT0_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[17]">EXINT1_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[a]">GPT1_IRQHandler</a> from isr.o(i.GPT1_IRQHandler) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[b]">GPT2_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[1d]">HS_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[20]">MONx_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[21]">PORT2_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[12]">SSC1_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[13]">SSC2_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_tle985x.o(i.SystemInit) referenced from startup_tle985x.o(.text)
 <LI><a href="#[14]">UART1_IRQHandler</a> from isr.o(i.UART1_IRQHandler) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[15]">UART2_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[18]">WAKEUP_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[24]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_tle985x.o(.text)
 <LI><a href="#[2e]">frame_do_nothing</a> from lin_il.o(i.frame_do_nothing) referenced 2 times from lin_config.o(.constdata)
 <LI><a href="#[2d]">frame_pack_st</a> from lin_il.o(i.frame_pack_st) referenced from lin_config.o(.constdata)
 <LI><a href="#[2c]">frame_unpack_ctr</a> from lin_il.o(i.frame_unpack_ctr) referenced from lin_config.o(.constdata)
 <LI><a href="#[22]">main</a> from components.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[29]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[1a]">node16_IRQHandler</a> from startup_tle985x.o(.text) referenced from startup_tle985x.o(RESET)
 <LI><a href="#[25]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[2b]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[26]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[2a]">rt_thread_timer_entry</a> from timer.o(i.rt_thread_timer_entry) referenced from timer.o(i.rt_system_timer_thread_init)
 <LI><a href="#[31]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[30]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[32]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[2f]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[27]">thread_data</a> from main.o(i.thread_data) referenced from main.o(i.main)
 <LI><a href="#[28]">thread_motion</a> from main.o(i.thread_motion) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[33]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[130]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[131]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[132]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[133]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[134]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>BDRV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CCU6SR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>CCU6SR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>CCU6SR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>CCU6SR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CSA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DIV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>MONx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PORT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SSC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SSC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>node16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle985x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[fe]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[10e]"></a>rt_hw_context_switch</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[10f]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[135]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[136]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodMiddleFilter
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCalc
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIFunc_Calc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2_Process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1_Process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_ManualProcess
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutyPattern
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIFunc_Calc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolution_Set
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2_Process
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIFunc_Calc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2_Process
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutyPattern
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCalc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_SpeedController
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRef_PWMDuty
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolution_Set
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_UpDir
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_SpeedController
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRef_PWMDuty
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_UpDir
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_DownDir
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRef_PWMDuty
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_UpDir
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_DownDir
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCalc
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_SpeedController
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2_Process
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRef_PWMDuty
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolution_Set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutyPattern
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_UpDir
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_DownDir
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCalc
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_UpDir
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_DownDir
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_SpeedController
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone3_Process
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRef_PWMDuty
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_UpDir
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_DownDir
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_SpeedController
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone3_Process
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRef_PWMDuty
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_UpDir
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_DownDir
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_SpeedController
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRef_PWMDuty
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1_Process
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIFunc_Calc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1_Process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_ManualProcess
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_UpDir
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_DownDir
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIFunc_Calc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2_Process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1_Process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_ManualProcess
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[139]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[13a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[39]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[42]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[41]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[34]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[13d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[51]"></a>ADC1_GetChAttFactor</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adc1.o(i.ADC1_GetChAttFactor))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetChResult_mV
</UL>

<P><STRONG><a name="[50]"></a>ADC1_GetChResult</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, adc1.o(i.ADC1_GetChResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC1_GetChResult
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetChResult_mV
</UL>

<P><STRONG><a name="[4f]"></a>ADC1_GetChResult_mV</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, adc1.o(i.ADC1_GetChResult_mV))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC1_GetChResult_mV &rArr; ADC1_GetChResult
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetChResult
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetChAttFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcKeyMonitor
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRef_PWMDuty
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCurrentCalc
</UL>

<P><STRONG><a name="[52]"></a>ADC1_Init</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, adc1.o(i.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC1_Init &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT1_Service
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[b5]"></a>ADC2_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, adc2.o(i.ADC2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[60]"></a>AdcKeyMonitor</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, myadc_serve.o(i.AdcKeyMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AdcKeyMonitor &rArr; ADC1_GetChResult_mV &rArr; ADC1_GetChResult
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetChResult_mV
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_AnalogMonitor
</UL>

<P><STRONG><a name="[61]"></a>AntiPich</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, antipinch_serve.o(i.AntiPich))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AntiPich &rArr; AvrSpeedCurrentCalc &rArr; CurrentCalc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testap
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowPosition_Get
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSpeedTicks_Get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MotorAction
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCurrentCalc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiZoneCheck
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APSpeedMonitor
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APCurrentMonitor
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_motion
</UL>

<P><STRONG><a name="[65]"></a>AvrSpeedCurrentCalc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, speed_serve.o(i.AvrSpeedCurrentCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = AvrSpeedCurrentCalc &rArr; CurrentCalc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorAvrSpeedCalc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCalc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetChResult_mV
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDuty_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiPich
</UL>

<P><STRONG><a name="[b6]"></a>BDRV_Init</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, bdrv.o(i.BDRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BDRV_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[8d]"></a>BDRV_Set_Bridge</STRONG> (Thumb, 36 bytes, Stack size 36 bytes, bdrv.o(i.BDRV_Set_Bridge))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BDRV_Set_Bridge
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[b7]"></a>CCU6_Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, ccu6.o(i.CCU6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCU6_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[53]"></a>Delay_us</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, wdt1.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[7f]"></a>Distance_Get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, position_serve.o(i.Distance_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2_Process
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>

<P><STRONG><a name="[76]"></a>DutySet_RealDownDir</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_serve.o(i.DutySet_RealDownDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DutySet_RealDownDir &rArr; SetPWM_Duty_DownDir &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_DownDir
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Control
</UL>

<P><STRONG><a name="[78]"></a>DutySet_RealUpDir</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_serve.o(i.DutySet_RealUpDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DutySet_RealUpDir &rArr; SetPWM_Duty_UpDir &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM_Duty_UpDir
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Control
</UL>

<P><STRONG><a name="[b8]"></a>GPT12E_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gpt12e.o(i.GPT12E_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[a]"></a>GPT1_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, isr.o(i.GPT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPT1_IRQHandler &rArr; HallSpeed_T2Call &rArr; rt_sem_release &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSpeed_T2Call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>Get_MotorAction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, applogic.o(i.Get_MotorAction))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiPich
</UL>

<P><STRONG><a name="[9b]"></a>Get_PinchStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, antipinch_serve.o(i.Get_PinchStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCommnads_Update
</UL>

<P><STRONG><a name="[a0]"></a>HBridgePWM_Off</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, pwm_serve.o(i.HBridgePWM_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HBridgePWM_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
</UL>

<P><STRONG><a name="[87]"></a>HallSpeedSignal_StatusGet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupt_serve.o(i.HallSpeedSignal_StatusGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HallSpeedSignal_StatusGet &rArr; HallMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallMonitor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCommnads_Update
</UL>

<P><STRONG><a name="[64]"></a>HallSpeedTicks_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interrupt_serve.o(i.HallSpeedTicks_Get))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_SpeedController
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiPich
</UL>

<P><STRONG><a name="[84]"></a>HallSpeed_T2Call</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, interrupt_serve.o(i.HallSpeed_T2Call))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HallSpeed_T2Call &rArr; rt_sem_release &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT1_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>INT_Init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, int.o(i.INT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[8f]"></a>ISR_HallProcess</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, interrupt_serve.o(i.ISR_HallProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ISR_HallProcess &rArr; AvrCalc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[5d]"></a>InitStepSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, position_serve.o(i.InitStepSet))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APProcess
</UL>

<P><STRONG><a name="[5a]"></a>KeyStatus_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, key_serve.o(i.KeyStatus_Set))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StallingProcess
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftStopProcess
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APProcess
</UL>

<P><STRONG><a name="[91]"></a>Key_AnalogMonitor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, key_serve.o(i.Key_AnalogMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Key_AnalogMonitor &rArr; AdcKeyMonitor &rArr; ADC1_GetChResult_mV &rArr; ADC1_GetChResult
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcKeyMonitor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalKeyLogic
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodCountFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCommnads_Update
</UL>

<P><STRONG><a name="[94]"></a>LINCmdDeal</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, lin_serve.o(i.LINCmdDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LINCmdDeal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_data
</UL>

<P><STRONG><a name="[b9]"></a>LIN_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lin.o(i.LIN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LIN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[92]"></a>MethodCountFilter</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, method_serve.o(i.MethodCountFilter))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_AnalogMonitor
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStalling_StatusGet
</UL>

<P><STRONG><a name="[6e]"></a>MethodMiddleFilter</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, method_serve.o(i.MethodMiddleFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MethodMiddleFilter &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentCalc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCalc
</UL>

<P><STRONG><a name="[98]"></a>Motion_Control</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, motorcontol_serve.o(i.Motion_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Motion_Control &rArr; AutoUp &rArr; Duty_AutoProcess &rArr; Zone1_Process &rArr; PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutySet_RealUpDir
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutySet_RealDownDir
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualUp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualDown
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDown
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_motion
</UL>

<P><STRONG><a name="[9a]"></a>MotorCommnads_Update</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, applogic.o(i.MotorCommnads_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MotorCommnads_Update &rArr; Key_AnalogMonitor &rArr; AdcKeyMonitor &rArr; ADC1_GetChResult_mV &rArr; ADC1_GetChResult
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_AnalogMonitor
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSpeedSignal_StatusGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StallingProcess
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftStopProcess
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APProcess
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStalling_StatusGet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowPosition_Get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PinchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_data
</UL>

<P><STRONG><a name="[9c]"></a>MotorStalling_StatusGet</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, motorstalling_serve.o(i.MotorStalling_StatusGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorStalling_StatusGet
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodCountFilter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStalling_Monitor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCommnads_Update
</UL>

<P><STRONG><a name="[a6]"></a>PIParams_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pifunc.o(i.PIParams_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamsInit_Running
</UL>

<P><STRONG><a name="[83]"></a>PI_SpeedController</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, pifunc.o(i.PI_SpeedController))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIFunc_Calc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSpeedTicks_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1_Process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_ManualProcess
</UL>

<P><STRONG><a name="[b4]"></a>PMU_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pmu.o(i.PMU_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[ba]"></a>PORT_Init</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, port.o(i.PORT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[70]"></a>PWMDuty_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motorcontol_serve.o(i.PWMDuty_Get))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCurrentCalc
</UL>

<P><STRONG><a name="[56]"></a>PopCurrentData</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, speed_serve.o(i.PopCurrentData))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APCurrentMonitor
</UL>

<P><STRONG><a name="[5f]"></a>PopiFarrayData</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, speed_serve.o(i.PopiFarrayData))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APSpeedMonitor
</UL>

<P><STRONG><a name="[a5]"></a>PosParas_Init</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, position_serve.o(i.PosParas_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftStopInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamsInit_Running
</UL>

<P><STRONG><a name="[b0]"></a>SCU_ClkInit</STRONG> (Thumb, 632 bytes, Stack size 12 bytes, scu.o(i.SCU_ClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCU_ClkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b3]"></a>SCU_Init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scu.o(i.SCU_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[5b]"></a>Set_PinchFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, antipinch_serve.o(i.Set_PinchFlag))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APProcess
</UL>

<P><STRONG><a name="[ab]"></a>SoftStopInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, position_serve.o(i.SoftStopInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftStopInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowPosition_Set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosParas_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowPosition_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftStopProcess
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_timeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>SysTick_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, wdt1.o(i.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[105]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, board.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_tle985x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SCU_ClkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT1_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_ClkInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>TLE_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tle_device.o(i.TLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TLE_Init &rArr; ADC1_Init &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT12E_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU6_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, isr.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART1_IRQHandler &rArr; uart_isr &rArr; lin_sci_rx_isr &rArr; lin_sci_rx_data &rArr; lin_process_id &rArr; lin_tl_tx_task &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle985x.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>UART1_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart.o(i.UART1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[bc]"></a>UART2_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart.o(i.UART2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
</UL>

<P><STRONG><a name="[b2]"></a>WDT1_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wdt1.o(i.WDT1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[54]"></a>WDT1_Service</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wdt1.o(i.WDT1_Service))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_data
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[63]"></a>WindowPosition_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interrupt_serve.o(i.WindowPosition_Get))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftStopInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamsInit_Running
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCommnads_Update
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiPich
</UL>

<P><STRONG><a name="[ac]"></a>WindowPosition_Set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interrupt_serve.o(i.WindowPosition_Set))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftStopInit
</UL>

<P><STRONG><a name="[58]"></a>WindowStopPos_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motorcontol_serve.o(i.WindowStopPos_Get))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APProcess
</UL>

<P><STRONG><a name="[7a]"></a>WindowTravel_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interrupt_serve.o(i.WindowTravel_Get))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_ManualProcess
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>

<P><STRONG><a name="[a2]"></a>WindowTravel_Set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interrupt_serve.o(i.WindowTravel_Set))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1_Process
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testap
</UL>

<P><STRONG><a name="[59]"></a>WindowZoneGet_Down</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, position_serve.o(i.WindowZoneGet_Down))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowZoneCheck
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APProcess
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamsInit_Running
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>

<P><STRONG><a name="[7b]"></a>WindowZoneGet_Up</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, position_serve.o(i.WindowZoneGet_Up))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowZoneCheck
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamsInit_Running
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>

<P><STRONG><a name="[4c]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[95]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, key_serve.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalKeyLogic
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINCmdDeal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_error_handle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_handle_error
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_data
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
</UL>

<P><STRONG><a name="[10d]"></a>__rt_ffs</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[140]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[141]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[142]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c5]"></a>diag_negative_response</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lin_diagnostic_support.o(i.diag_negative_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_transmit_response_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B7_service
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B5_service
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B4_service
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B3_service
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B2_service
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B1_service
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_3E_service
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_2E_service
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_22_service
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_10_service
</UL>

<P><STRONG><a name="[d6]"></a>diag_no_response</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lin_diagnostic_support.o(i.diag_no_response))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B2_service
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B0_service
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_3E_service
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_10_service
</UL>

<P><STRONG><a name="[c6]"></a>diag_transmit_response_msg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lin_diagnostic_support.o(i.diag_transmit_response_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tx_response_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B7_service
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B6_service
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B2_service
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B0_service
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_3E_service
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_2E_service
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_22_service
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_10_service
</UL>

<P><STRONG><a name="[2e]"></a>frame_do_nothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lin_il.o(i.frame_do_nothing))
<BR>[Address Reference Count : 1]<UL><LI> lin_config.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>frame_pack_st</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lin_il.o(i.frame_pack_st))
<BR>[Address Reference Count : 1]<UL><LI> lin_config.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>frame_unpack_ctr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lin_il.o(i.frame_unpack_ctr))
<BR>[Address Reference Count : 1]<UL><LI> lin_config.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>get_configured_nad</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lin_config.o(i.get_configured_nad))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_tx_task
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_rx_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
</UL>

<P><STRONG><a name="[d2]"></a>get_initial_nad</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lin_config.o(i.get_initial_nad))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_rx_handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B0_service
</UL>

<P><STRONG><a name="[f1]"></a>get_reset_request_flg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lin_diagnostic_support.o(i.get_reset_request_flg))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_update_tx
</UL>

<P><STRONG><a name="[f0]"></a>get_response_nad</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lin_diagnostic_service.o(i.get_response_nad))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_tx_task
</UL>

<P><STRONG><a name="[e2]"></a>lin_checksum</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lin_protocol.o(i.lin_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lin_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_process_id
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_data
</UL>

<P><STRONG><a name="[c8]"></a>lin_configration_identification_service</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lin_diagnostic_service.o(i.lin_configration_identification_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lin_configration_identification_service &rArr; lin_diag_B2_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B7_service
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B6_service
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B5_service
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B4_service
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B3_service
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B2_service
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B1_service
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B0_service
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_initial_nad
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_configured_nad
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
</UL>

<P><STRONG><a name="[db]"></a>lin_diag_request_dispose</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, lin_diagnostic_service.o(i.lin_diag_request_dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lin_diag_request_dispose &rArr; lin_configration_identification_service &rArr; lin_diag_B2_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_get_rx_length
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_get_rx_data
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_no_response
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_3E_service
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_2E_service
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_22_service
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_10_service
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_configured_nad
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_rx_handler
</UL>

<P><STRONG><a name="[e1]"></a>lin_goto_idle_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lin_hal.o(i.lin_goto_idle_state))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_isr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_process_id
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_data
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_init
</UL>

<P><STRONG><a name="[dd]"></a>lin_handle_error</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lin_protocol.o(i.lin_handle_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lin_handle_error &rArr; lin_tl_error_handle &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_error_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_isr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_data
</UL>

<P><STRONG><a name="[12e]"></a>lin_period_handle</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, lin_il.o(i.lin_period_handle))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_motion
</UL>

<P><STRONG><a name="[df]"></a>lin_process_id</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lin_protocol.o(i.lin_process_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lin_process_id &rArr; lin_tl_tx_task &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_tx_task
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_checksum
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_tx_response
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_response
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_goto_idle_state
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_data
</UL>

<P><STRONG><a name="[e9]"></a>lin_process_parity</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lin_protocol.o(i.lin_process_parity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lin_process_parity
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_data
</UL>

<P><STRONG><a name="[e5]"></a>lin_rx_diag_frame</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lin_il.o(i.lin_rx_diag_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lin_rx_diag_frame &rArr; lin_tl_rx_handler &rArr; lin_diag_request_dispose &rArr; lin_configration_identification_service &rArr; lin_diag_B2_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_rx_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_motion
</UL>

<P><STRONG><a name="[8e]"></a>lin_sci_init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, lin_hal.o(i.lin_sci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lin_sci_init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_goto_idle_state
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[e8]"></a>lin_sci_rx_data</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, lin_hal.o(i.lin_sci_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lin_sci_rx_data &rArr; lin_process_id &rArr; lin_tl_tx_task &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_update_tx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_update_rx
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_process_parity
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_process_id
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_handle_error
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_checksum
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_goto_idle_state
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_isr
</UL>

<P><STRONG><a name="[ec]"></a>lin_sci_rx_isr</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, lin_hal.o(i.lin_sci_rx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lin_sci_rx_isr &rArr; lin_sci_rx_data &rArr; lin_process_id &rArr; lin_tl_tx_task &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_handle_error
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_goto_idle_state
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[e4]"></a>lin_sci_rx_response</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lin_hal.o(i.lin_sci_rx_response))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_process_id
</UL>

<P><STRONG><a name="[af]"></a>lin_sci_timeout</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, lin_hal.o(i.lin_sci_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lin_sci_timeout &rArr; lin_handle_error &rArr; lin_tl_error_handle &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_timer_task
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_handle_error
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_goto_idle_state
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e3]"></a>lin_sci_tx_response</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lin_hal.o(i.lin_sci_tx_response))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_process_id
</UL>

<P><STRONG><a name="[de]"></a>lin_tl_error_handle</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, lin_tl_protocol.o(i.lin_tl_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lin_tl_error_handle &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_rx_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_timer_task
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_handle_error
</UL>

<P><STRONG><a name="[e6]"></a>lin_tl_rx_handler</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, lin_tl_protocol.o(i.lin_tl_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lin_tl_rx_handler &rArr; lin_diag_request_dispose &rArr; lin_configration_identification_service &rArr; lin_diag_B2_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_memory_copy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_error_handle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_initial_nad
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_configured_nad
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_rx_diag_frame
</UL>

<P><STRONG><a name="[e0]"></a>lin_tl_tx_task</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, lin_tl_protocol.o(i.lin_tl_tx_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lin_tl_tx_task &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_memory_copy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_response_nad
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_configured_nad
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_process_id
</UL>

<P><STRONG><a name="[c7]"></a>lin_tx_response_msg</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, lin_tl_protocol.o(i.lin_tx_response_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_memory_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_transmit_response_msg
</UL>

<P><STRONG><a name="[ea]"></a>lin_update_rx</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, lin_protocol.o(i.lin_update_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lin_update_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_data
</UL>

<P><STRONG><a name="[eb]"></a>lin_update_tx</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lin_protocol.o(i.lin_update_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lin_update_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_reset_request_flg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reset_request_flg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_data
</UL>

<P><STRONG><a name="[f3]"></a>$Super$$main</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = $Super$$main &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_HallProcess
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[29]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[f2]"></a>put_reset_request_flg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lin_diagnostic_support.o(i.put_reset_request_flg))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_update_tx
</UL>

<P><STRONG><a name="[fb]"></a>rt_application_init</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_application_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[106]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[fa]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[fc]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[f4]"></a>rt_event_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ipc.o(i.rt_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_event_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[101]"></a>rt_exit_critical</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[103]"></a>rt_hw_board_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_hw_board_init &rArr; HardwareInit &rArr; TLE_Init &rArr; ADC1_Init &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysTick_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[35]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[c1]"></a>rt_hw_stack_init</STRONG> (Thumb, 58 bytes, Stack size 36 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[88]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSpeed_T2Call
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8a]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSpeed_T2Call
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c0]"></a>rt_memset</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[10a]"></a>rt_object_detach</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[10b]"></a>rt_object_get_information</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[ff]"></a>rt_object_init</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
</UL>

<P><STRONG><a name="[121]"></a>rt_object_is_systemobject</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[102]"></a>rt_schedule</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[110]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[111]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
</UL>

<P><STRONG><a name="[f5]"></a>rt_sem_init</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[89]"></a>rt_sem_release</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_sem_release &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSpeed_T2Call
</UL>

<P><STRONG><a name="[f9]"></a>rt_sem_take</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[12d]"></a>rt_show_version</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[116]"></a>rt_soft_timer_check</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, timer.o(i.rt_soft_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_soft_timer_check &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[10c]"></a>rt_strncpy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[118]"></a>rt_system_scheduler_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[11a]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[11c]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[11d]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[11e]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[25]"></a>rt_thread_exit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[123]"></a>rt_thread_idle_excute</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_idle_excute &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[125]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[f6]"></a>rt_thread_init</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[113]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[114]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[11f]"></a>rt_thread_sleep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[f7]"></a>rt_thread_startup</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[108]"></a>rt_thread_suspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[26]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[129]"></a>rt_thread_yield</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_yield &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[68]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anti_Override
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[ae]"></a>rt_tick_increase</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[12a]"></a>rt_timer_check</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[115]"></a>rt_timer_control</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_timer_control
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[120]"></a>rt_timer_detach</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[c2]"></a>rt_timer_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[f8]"></a>rt_timer_start</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[127]"></a>rt_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[4e]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>set_configured_nad</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lin_config.o(i.set_configured_nad))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B0_service
</UL>

<P><STRONG><a name="[67]"></a>testap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motorcontol_serve.o(i.testap))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = testap &rArr; ParamsInit_Running &rArr; VoltRef_PWMDuty &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowTravel_Set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamsInit_Running
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiPich
</UL>

<P><STRONG><a name="[ee]"></a>tl_data_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lin_tl_protocol.o(i.tl_data_init))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_error_handle
</UL>

<P><STRONG><a name="[d4]"></a>tl_get_rx_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lin_tl_protocol.o(i.tl_get_rx_data))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B7_service
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B2_service
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_B0_service
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_3E_service
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_2E_service
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_22_service
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_10_service
</UL>

<P><STRONG><a name="[dc]"></a>tl_get_rx_length</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lin_tl_protocol.o(i.tl_get_rx_length))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
</UL>

<P><STRONG><a name="[ef]"></a>tl_memory_copy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lin_tl_protocol.o(i.tl_memory_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tl_memory_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_tx_task
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_rx_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tx_response_msg
</UL>

<P><STRONG><a name="[ed]"></a>tl_timer_task</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, lin_tl_protocol.o(i.tl_timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tl_timer_task &rArr; lin_tl_error_handle &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_tl_error_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_timeout
</UL>

<P><STRONG><a name="[be]"></a>uart_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_isr &rArr; lin_sci_rx_isr &rArr; lin_sci_rx_data &rArr; lin_process_id &rArr; lin_tl_tx_task &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_rx_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>uds_set_diagnostic_mode</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, lin_diagnostic_support.o(i.uds_set_diagnostic_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uds_set_diagnostic_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_10_service
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[27]"></a>thread_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.thread_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = thread_data &rArr; MotorCommnads_Update &rArr; Key_AnalogMonitor &rArr; AdcKeyMonitor &rArr; ADC1_GetChResult_mV &rArr; ADC1_GetChResult
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT1_Service
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCommnads_Update
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINCmdDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[28]"></a>thread_motion</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.thread_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = thread_motion &rArr; Motion_Control &rArr; AutoUp &rArr; Duty_AutoProcess &rArr; Zone1_Process &rArr; PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_rx_diag_frame
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_period_handle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Control
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiPich
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[55]"></a>APCurrentMonitor</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, antipinch_serve.o(i.APCurrentMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APCurrentMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopCurrentData
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiPich
</UL>

<P><STRONG><a name="[5e]"></a>APSpeedMonitor</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, antipinch_serve.o(i.APSpeedMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APSpeedMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopiFarrayData
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiPich
</UL>

<P><STRONG><a name="[66]"></a>AntiZoneCheck</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, antipinch_serve.o(i.AntiZoneCheck))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiPich
</UL>

<P><STRONG><a name="[69]"></a>AutoDown</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motorcontol_serve.o(i.AutoDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AutoDown &rArr; Duty_AutoProcess &rArr; Zone1_Process &rArr; PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Control
</UL>

<P><STRONG><a name="[6b]"></a>AutoUp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motorcontol_serve.o(i.AutoUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AutoUp &rArr; Duty_AutoProcess &rArr; Zone1_Process &rArr; PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Control
</UL>

<P><STRONG><a name="[75]"></a>DutyPattern</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, motorcontol_serve.o(i.DutyPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DutyPattern &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone3_Process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1_Process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_ManualProcess
</UL>

<P><STRONG><a name="[6a]"></a>Duty_AutoProcess</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, motorcontol_serve.o(i.Duty_AutoProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Duty_AutoProcess &rArr; Zone1_Process &rArr; PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowZoneGet_Up
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowZoneGet_Down
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowTravel_Get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_Get
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone3_Process
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2_Process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1_Process
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowPosition_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDown
</UL>

<P><STRONG><a name="[81]"></a>Duty_ManualProcess</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motorcontol_serve.o(i.Duty_ManualProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Duty_ManualProcess &rArr; PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowTravel_Get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_SpeedController
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutyPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualUp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualDown
</UL>

<P><STRONG><a name="[96]"></a>ManualDown</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motorcontol_serve.o(i.ManualDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ManualDown &rArr; Duty_ManualProcess &rArr; PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_ManualProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Control
</UL>

<P><STRONG><a name="[97]"></a>ManualUp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motorcontol_serve.o(i.ManualUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ManualUp &rArr; Duty_ManualProcess &rArr; PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_ManualProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Control
</UL>

<P><STRONG><a name="[99]"></a>MotorStop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motorcontol_serve.o(i.MotorStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MotorStop &rArr; ParamsInit_Running &rArr; VoltRef_PWMDuty &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowTravel_Set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HBridgePWM_Off
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamsInit_Running
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Control
</UL>

<P><STRONG><a name="[a1]"></a>ParamsInit_Running</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, motorcontol_serve.o(i.ParamsInit_Running))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ParamsInit_Running &rArr; VoltRef_PWMDuty &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowZoneGet_Up
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowZoneGet_Down
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosParas_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIParams_Reset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRef_PWMDuty
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolutionCalc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowPosition_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testap
</UL>

<P><STRONG><a name="[a8]"></a>ResolutionCalc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, motorcontol_serve.o(i.ResolutionCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ResolutionCalc &rArr; Resolution_Set &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolution_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamsInit_Running
</UL>

<P><STRONG><a name="[a9]"></a>Resolution_Set</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, motorcontol_serve.o(i.Resolution_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Resolution_Set &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1_Process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolutionCalc
</UL>

<P><STRONG><a name="[a7]"></a>VoltRef_PWMDuty</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, motorcontol_serve.o(i.VoltRef_PWMDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VoltRef_PWMDuty &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetChResult_mV
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamsInit_Running
</UL>

<P><STRONG><a name="[7c]"></a>Zone1_Process</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, motorcontol_serve.o(i.Zone1_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Zone1_Process &rArr; PI_SpeedController &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowTravel_Set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_SpeedController
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolution_Set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutyPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>

<P><STRONG><a name="[7d]"></a>Zone2_Process</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, motorcontol_serve.o(i.Zone2_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Zone2_Process &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>

<P><STRONG><a name="[80]"></a>Zone3_Process</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, motorcontol_serve.o(i.Zone3_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Zone3_Process &rArr; DutyPattern &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutyPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duty_AutoProcess
</UL>

<P><STRONG><a name="[9f]"></a>MotorStalling_Monitor</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, motorstalling_serve.o(i.MotorStalling_Monitor))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStalling_StatusGet
</UL>

<P><STRONG><a name="[a3]"></a>PIFunc_Calc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pifunc.o(i.PIFunc_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PIFunc_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_SpeedController
</UL>

<P><STRONG><a name="[6c]"></a>AvrSpeedCalc</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, speed_serve.o(i.AvrSpeedCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AvrSpeedCalc &rArr; MethodMiddleFilter &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodMiddleFilter
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCurrentCalc
</UL>

<P><STRONG><a name="[71]"></a>CurrentCalc</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, speed_serve.o(i.CurrentCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CurrentCalc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodMiddleFilter
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCurrentCalc
</UL>

<P><STRONG><a name="[6f]"></a>ErrorAvrSpeedCalc</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, speed_serve.o(i.ErrorAvrSpeedCalc))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrSpeedCurrentCalc
</UL>

<P><STRONG><a name="[57]"></a>APProcess</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, applogic.o(i.APProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = APProcess &rArr; Anti_Override
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatus_Set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anti_Override
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStepSet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowZoneGet_Down
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowStopPos_Get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PinchFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCommnads_Update
</UL>

<P><STRONG><a name="[5c]"></a>Anti_Override</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, applogic.o(i.Anti_Override))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anti_Override
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APProcess
</UL>

<P><STRONG><a name="[9e]"></a>SoftStopProcess</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, applogic.o(i.SoftStopProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SoftStopProcess &rArr; WindowZoneCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatus_Set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowZoneCheck
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftStopInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCommnads_Update
</UL>

<P><STRONG><a name="[9d]"></a>StallingProcess</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, applogic.o(i.StallingProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StallingProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatus_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCommnads_Update
</UL>

<P><STRONG><a name="[ad]"></a>WindowZoneCheck</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, applogic.o(i.WindowZoneCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WindowZoneCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowZoneGet_Up
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowZoneGet_Down
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftStopProcess
</UL>

<P><STRONG><a name="[93]"></a>LocalKeyLogic</STRONG> (Thumb, 206 bytes, Stack size 4 bytes, key_serve.o(i.LocalKeyLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LocalKeyLogic &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_AnalogMonitor
</UL>

<P><STRONG><a name="[90]"></a>AvrCalc</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, interrupt_serve.o(i.AvrCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvrCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_HallProcess
</UL>

<P><STRONG><a name="[85]"></a>HallMonitor</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, interrupt_serve.o(i.HallMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HallMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSpeedTicks_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSpeedSignal_StatusGet
</UL>

<P><STRONG><a name="[86]"></a>HallSpeedTicks_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interrupt_serve.o(i.HallSpeedTicks_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallMonitor
</UL>

<P><STRONG><a name="[77]"></a>SetPWM_Duty_DownDir</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, pwm_serve.o(i.SetPWM_Duty_DownDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetPWM_Duty_DownDir &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutySet_RealDownDir
</UL>

<P><STRONG><a name="[79]"></a>SetPWM_Duty_UpDir</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, pwm_serve.o(i.SetPWM_Duty_UpDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetPWM_Duty_UpDir &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutySet_RealUpDir
</UL>

<P><STRONG><a name="[d3]"></a>lin_diag_10_service</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lin_diagnostic_service.o(i.lin_diag_10_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lin_diag_10_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_set_diagnostic_mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_get_rx_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_transmit_response_msg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_no_response
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
</UL>

<P><STRONG><a name="[d7]"></a>lin_diag_22_service</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, lin_diagnostic_service.o(i.lin_diag_22_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lin_diag_22_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_get_rx_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_transmit_response_msg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
</UL>

<P><STRONG><a name="[d8]"></a>lin_diag_2E_service</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lin_diagnostic_service.o(i.lin_diag_2E_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lin_diag_2E_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_get_rx_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_transmit_response_msg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
</UL>

<P><STRONG><a name="[d9]"></a>lin_diag_3E_service</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lin_diagnostic_service.o(i.lin_diag_3E_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lin_diag_3E_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_get_rx_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_transmit_response_msg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_no_response
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_diag_request_dispose
</UL>

<P><STRONG><a name="[ca]"></a>lin_diag_B0_service</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lin_diagnostic_service.o(i.lin_diag_B0_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lin_diag_B0_service &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_get_rx_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_transmit_response_msg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_no_response
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_configured_nad
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_initial_nad
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
</UL>

<P><STRONG><a name="[cb]"></a>lin_diag_B1_service</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lin_diagnostic_service.o(i.lin_diag_B1_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lin_diag_B1_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
</UL>

<P><STRONG><a name="[cc]"></a>lin_diag_B2_service</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lin_diagnostic_service.o(i.lin_diag_B2_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lin_diag_B2_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_get_rx_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_transmit_response_msg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_no_response
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
</UL>

<P><STRONG><a name="[cd]"></a>lin_diag_B3_service</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lin_diagnostic_service.o(i.lin_diag_B3_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lin_diag_B3_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
</UL>

<P><STRONG><a name="[ce]"></a>lin_diag_B4_service</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lin_diagnostic_service.o(i.lin_diag_B4_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lin_diag_B4_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
</UL>

<P><STRONG><a name="[cf]"></a>lin_diag_B5_service</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lin_diagnostic_service.o(i.lin_diag_B5_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lin_diag_B5_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
</UL>

<P><STRONG><a name="[d0]"></a>lin_diag_B6_service</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lin_diagnostic_service.o(i.lin_diag_B6_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lin_diag_B6_service &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_transmit_response_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
</UL>

<P><STRONG><a name="[d1]"></a>lin_diag_B7_service</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, lin_diagnostic_service.o(i.lin_diag_B7_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lin_diag_B7_service &rArr; diag_negative_response &rArr; diag_transmit_response_msg &rArr; lin_tx_response_msg &rArr; tl_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_get_rx_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_transmit_response_msg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diag_negative_response
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_configration_identification_service
</UL>

<P><STRONG><a name="[e7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lin_hal.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_init
</UL>

<P><STRONG><a name="[8b]"></a>HardwareInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, board.o(i.HardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HardwareInit &rArr; TLE_Init &rArr; ADC1_Init &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_sci_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Set_Bridge
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[104]"></a>_SysTick_Config</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, board.o(i._SysTick_Config))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[31]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[30]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[32]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[2f]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[124]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[2b]"></a>rt_thread_idle_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[107]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[100]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
</UL>

<P><STRONG><a name="[109]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[112]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[119]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[bf]"></a>_rt_thread_init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[122]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[126]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[c3]"></a>_rt_timer_init</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[117]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[c4]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
</UL>

<P><STRONG><a name="[12c]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[12b]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[2a]"></a>rt_thread_timer_entry</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, timer.o(i.rt_thread_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_thread_timer_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.rt_system_timer_thread_init)
</UL>
<P><STRONG><a name="[128]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timer.o(i.rt_timer_list_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
